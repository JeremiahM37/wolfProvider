name: hostap and wpa supplicant Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ '*' ] # [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
      replace_default: ${{ matrix.replace_default }}
    strategy:
      matrix:
        wolfssl_ref: [ 'master', 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        replace_default: [ true ]

  test_hostap:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
    # Run inside Debian Bookworm with privileged access for UML
    container:
      image: debian:bookworm
      options: --privileged --cap-add=ALL -v /dev:/dev
      env:
        DEBIAN_FRONTEND: noninteractive
    # This should be a safe limit for the tests to run.
    timeout-minutes: 90
    strategy:
      matrix:
        hostap_ref: [ 'main' ]
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '', 'OPENSSL' ]
        replace_default: [ true ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages

    steps:
      # Checkout the source so we can run the check-workflow-result script.
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checking OpenSSL/wolfProvider packages in cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            ${{ env.WOLFSSL_PACKAGES_PATH }}
            ${{ env.OPENSSL_PACKAGES_PATH }}
            ${{ env.WOLFPROV_PACKAGES_PATH }}
          key: openssl-wolfprov-debian-packages-${{ github.sha }}${{ matrix.replace_default && '-replace-default' || '' }}
          fail-on-cache-miss: true

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          printf "Installing OpenSSL/wolfProvider packages:\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/libwolfssl_*.deb

          apt install --reinstall -y \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

          apt install --reinstall -y \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/libwolfprov_*.deb

      - name: Show OpenSSL version
        run: |
          echo "OpenSSL version:"
          openssl version -a || true

      - name: Test OpenSSL providers before hostap installation
        run: |
          echo "Testing OpenSSL providers before hostap installation..."
          openssl list -providers

      - name: Install hostap dependencies
        run: |
          apt-get update
          apt-get install -y libpcap0.8 libpcap-dev curl libcurl4-openssl-dev \
            libnl-3-dev binutils-dev libiberty-dev libnl-genl-3-dev \
            libnl-route-3-dev libdbus-1-dev bridge-utils tshark python3-pycryptodome \
            libsqlite3-dev libzstd1 wireless-tools iw build-essential autoconf automake \
            libtool pkg-config git wget ca-certificates flex bison bc libxml2-dev \
            zlib1g-dev python3-pip
          # Uninstall system cryptography and reinstall with custom OpenSSL
          apt-get remove -y python3-cryptography || true
          pip install --no-cache-dir --force-reinstall --break-system-packages cryptography

      - name: Checkout hostap
        run: git clone git://w1.fi/hostap.git hostap

      - name: Checkout linux
        uses: actions/checkout@v4
        with:
          repository: torvalds/linux
          path: linux
          ref: master

      - name: Compile linux
        run: |
          cp $GITHUB_WORKSPACE/hostap/tests/hwsim/vm/kernel-config.uml linux/.config
          cd linux
          yes "" | ARCH=um make -j $(nproc)

      - name: Update config
        working-directory: hostap/tests/hwsim
        run: |
          cat << EOF >> example-hostapd.config
            # Use system-installed OpenSSL/wolfSSL packages
            CFLAGS += -I/usr/include/openssl
            LDFLAGS += -L/usr/lib/x86_64-linux-gnu
            LIBS += -lssl -lcrypto
          EOF
          cat << EOF >> example-wpa_supplicant.config
            # Use system-installed OpenSSL/wolfSSL packages
            CFLAGS += -I/usr/include/openssl
            LDFLAGS += -L/usr/lib/x86_64-linux-gnu
            LIBS += -lssl -lcrypto
          EOF

      - name: Setup non-WPFF environment
        working-directory: hostap/tests/hwsim
        if: matrix.force_fail == ''
        run: |
          sed -i '115r /dev/stdin' vm/inside.sh << EOF
            echo "setting env variables"
            # Set up wolfSSL environment variables
            # In UML mode, we can access the host filesystem directly
            echo "Setting up wolfSSL environment in UML mode"
            # Use system-installed packages - find where wolfprov is actually installed
            export OPENSSL_MODULES=\$(find /usr -name "libwolfprov.so" -exec dirname {} \; 2>/dev/null | head -1)
            export OPENSSL_CONF="/etc/ssl/openssl.cnf"
            export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1
            echo "wolfSSL environment variables set:"
            echo "OPENSSL_MODULES: \$OPENSSL_MODULES"
            echo "OPENSSL_CONF: \$OPENSSL_CONF"
            # Test if wolfProvider is available
            echo "Testing OpenSSL providers:"
            openssl list -providers
          EOF

      - name: Setup WPFF environment
        working-directory: hostap/tests/hwsim
        if: matrix.force_fail == 'WOLFPROV_FORCE_FAIL=1'
        run: |
          sed -i '115r /dev/stdin' vm/inside.sh << EOF
            echo "setting env variables"
            # Set up wolfSSL environment variables
            echo "Setting up wolfSSL environment in UML mode"
            # Use system-installed packages - find where wolfprov is actually installed
            export OPENSSL_MODULES=\$(find /usr -name "libwolfprov.so" -exec dirname {} \; 2>/dev/null | head -1)
            export OPENSSL_CONF="/etc/ssl/openssl.cnf"
            export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1
            export WOLFPROV_FORCE_FAIL=1
            echo "wolfSSL environment variables set:"
            echo "OPENSSL_MODULES: \$OPENSSL_MODULES"
            echo "OPENSSL_CONF: \$OPENSSL_CONF"
            echo "WOLFPROV_FORCE_FAIL: \$WOLFPROV_FORCE_FAIL"
            # Test if wolfProvider is available
            echo "Testing OpenSSL providers:"
            openssl list -providers
          EOF

      - name: Update certs
        working-directory: hostap/tests/hwsim/auth_serv
        run: ./update.sh

      - name: Build hostap and wpa_supplicant
        working-directory: hostap/tests/hwsim/
        run: ./build.sh

      - name: Verify openssl binaries linked
        working-directory: hostap
        run: |
          ldd hostapd/hostapd | grep ssl
          ldd wpa_supplicant/wpa_supplicant | grep ssl

      - name: Run focused tests
        id: testing
        working-directory: hostap/tests/hwsim/
        continue-on-error: true
        run: |
          set +e
          cat << EOF >> vm/vm-config
            KERNELDIR=$GITHUB_WORKSPACE/linux
            KVMARGS="-cpu host"
          EOF

          # First, let's do a quick sanity check
          echo "=== Sanity check: Testing VM startup ==="
          timeout 30s ./vm/parallel-vm.py --nocurses 1 ap_open || echo "Initial test result: $?"

          # Check if we got actual VM logs
          if [ -d "/tmp/hwsim-test-logs" ]; then
            echo "=== VM startup logs ==="
            ls -la /tmp/hwsim-test-logs/
            echo "=== First VM console log (if exists) ==="
            cat /tmp/hwsim-test-logs/vm-*-0.log 2>/dev/null | head -50 || echo "No VM logs found"
          fi

          SMOKE_TIMEOUT="3m"
          TLS_TIMEOUT="5m"

          # Run only the focused tests
          echo "=== Running focused smoke tests ==="
          SMOKE_TESTS="ap_open ap_wpa2_psk p2p_device_discovery"
          echo "Running smoke tests with timeout $SMOKE_TIMEOUT: $SMOKE_TESTS"
          timeout $SMOKE_TIMEOUT ./vm/parallel-vm.py --nocurses $(nproc) $SMOKE_TESTS || SMOKE_RES=$?

          echo "=== Running TLS/EAP tests ==="
          TLS_EAP_TESTS="ap_wpa2_eap_tls ap_wpa2_eap_peap_eap_mschapv2 ap_wpa2_eap_ttls_mschapv2"
          echo "Running TLS/EAP tests with timeout $TLS_TIMEOUT: $TLS_EAP_TESTS"
          timeout $TLS_TIMEOUT ./vm/parallel-vm.py --nocurses $(nproc) $TLS_EAP_TESTS || TLS_RES=$?

          # Check for timeout conditions (exit code 124)
          SMOKE_TIMEOUT_FLAG=false
          TLS_TIMEOUT_FLAG=false
          if [ "${SMOKE_RES:-0}" -eq "124" ]; then
            echo "Smoke tests timed out"
            SMOKE_TIMEOUT_FLAG=true
          fi
          if [ "${TLS_RES:-0}" -eq "124" ]; then
            echo "TLS/EAP tests timed out"
            TLS_TIMEOUT_FLAG=true
          fi

          # Combine results
          FINAL_RES=0
          if [ "${SMOKE_RES:-0}" -ne "0" ] || [ "${TLS_RES:-0}" -ne "0" ]; then
            FINAL_RES=1
          fi

          # For force fail tests, we expect failures (including timeouts)
          if [ "${{ matrix.force_fail }}" == "WOLFPROV_FORCE_FAIL=1" ]; then
            if [ $FINAL_RES -ne 0 ]; then
              if [ "$SMOKE_TIMEOUT_FLAG" = true ] || [ "$TLS_TIMEOUT_FLAG" = true ]; then
                echo "EXPECTED TIMEOUT/STALL: Tests timed out as expected with WOLFPROV_FORCE_FAIL=1"
                echo "This confirms wolfProvider force fail is working correctly (causing stalls)"
              else
                echo "EXPECTED FAILURE: Tests failed as expected with WOLFPROV_FORCE_FAIL=1"
                echo "This confirms wolfProvider is being used correctly"
              fi
              exit 0
            else
              echo "UNEXPECTED SUCCESS: Tests passed when they should have failed/timed out with force_fail"
              exit 1
            fi
          else
            if [ $FINAL_RES -eq 0 ]; then
              echo "SUCCESS: Tests passed without force fail"
              exit 0
            else
              if [ "$SMOKE_TIMEOUT_FLAG" = true ] || [ "$TLS_TIMEOUT_FLAG" = true ]; then
                echo "UNEXPECTED TIMEOUT: Tests timed out without force fail"
              else
                echo "FAILURE: Tests failed without force fail"
              fi
              exit 1
            fi
          fi
