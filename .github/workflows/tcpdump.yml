name: tcpdump tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    # This calls your existing reusable workflow to build wolfSSL, OpenSSL, and wolfProvider
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      # Pass any necessary inputs to your build-wolfprovider.yml
      # For example, if it uses matrix for wolfssl_ref and openssl_ref:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
    strategy:
      matrix:
        # Define matrix for crypto dependencies
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ] # Example refs
        openssl_ref: [ 'openssl-3.5.0' ] # Example ref

  test_tcpdump:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider # This ensures build_wolfprovider completes first
    timeout-minutes: 15 # Shorter timeout as dependencies are cached
    strategy:
      matrix:
        # Match the matrix from build_wolfprovider for consistent caching
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        # Add matrix for force_fail
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '' ]

    steps:
      - name: Checkout tcpdump and libpcap
        uses: actions/checkout@v4
        with:
          repository: the-tcpdump-group/tcpdump
          path: tcpdump_repo

      - name: Checkout libpcap
        uses: actions/checkout@v4
        with:
          repository: the-tcpdump-group/libpcap
          path: libpcap_repo

      - name: Retrieving wolfSSL/OpenSSL/wolfProvider from cache
        uses: actions/cache/restore@v4
        id: crypto-cache # ID to reference outputs from cache restore
        with:
          path: |
            wolfssl-install
            openssl-install
            wolfprov-install
            provider.conf
          # Key must match how it's saved in build-wolfprovider.yml
          key: crypto-deps-${{ github.sha }} # Assuming build-wolfprovider uses similar keying
          fail-on-cache-miss: true

      - name: Install build tools for libpcap/tcpdump
        run: |
          sudo apt-get update
          sudo apt-get install -y flex bison autoconf libtool

      - name: Build and install libpcap
        working-directory: libpcap_repo
        run: |
          ./autogen.sh
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install

      - name: Build and install tcpdump
        working-directory: tcpdump_repo
        run: |
          ./autogen.sh
          ./configure --prefix=/usr/local --with-pcap=/usr/local
          make -j$(nproc)
          sudo make install

      - name: Prepare and run tcpdump tests with wolfProvider
        run: |
          # The paths are relative to GITHUB_WORKSPACE after cache restoration
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/wolfssl-install/lib:\
                                  $GITHUB_WORKSPACE/openssl-install/lib:\
                                  $GITHUB_WORKSPACE/openssl-install/lib64:\
                                  $LD_LIBRARY_PATH

          export OPENSSL_MODULES=$GITHUB_WORKSPACE/wolfprov-install/lib
          export OPENSSL_CONF=$GITHUB_WORKSPACE/provider.conf

          # Ensure the system's dynamic linker cache is updated (if needed)
          sudo ldconfig

          echo "Running make check with WOLFPROV_FORCE_FAIL=${{ matrix.force_fail }}"
          export ${{ matrix.force_fail }}

          pushd tcpdump_repo

          make check 2>&1 | tee tcpdump-test-${{ matrix.force_fail }}.log
          TEST_RESULT=$?

          popd

          echo "TEST_RESULT: $TEST_RESULT"

          if [[ "${{ matrix.force_fail }}" == "WOLFPROV_FORCE_FAIL=1" ]]; then
            echo "Expecting tests to fail (WOLFPROV_FORCE_FAIL=1)"
            if [[ $TEST_RESULT -ne 0 ]]; then
              echo "Tests failed as expected. Successfully linked to wolfProvider."
            else
              echo "Error: Tests passed when they should have failed. Linkage to wolfProvider might not be active or force_fail is not working."
              exit 1
            fi
          else
            echo "Expecting tests to pass (no WOLFPROV_FORCE_FAIL)"
            if [[ $TEST_RESULT -eq 0 ]]; then
              echo "Tests passed as expected."
            else
              echo "Error: Tests failed when they should have passed."
              exit 1
            fi
          fi
